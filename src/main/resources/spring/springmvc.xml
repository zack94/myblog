<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 组件扫描器 -->
    <context:component-scan base-package="cn.suse.zack.controller"/>
    <!--在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，-->
    <!--如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean-->
    <!--<context:component-scan base-package="cn.suse.zack.controller"></context:component-scan>-->

    <!--<context:component-scan base-package="">-->
    <!--</context:component-scan>-->

    <!--If you dont include mvc:annotation-driven also your MVC application would work
    if you have used the context:component-scan for creating the beans or defined the beans in your XML file-->
    <!--. But, mvc:annotation-driven does some extra job on configuring the special beans
    that would not have been configured if you are not using this element in your XML file.-->
    <!--This tag would registers the HandlerMapping and HandlerAdapter required to
    dispatch requests to your @Controllers.-->
    <mvc:annotation-driven conversion-service="conversionService">

    </mvc:annotation-driven>


    <!-- 自定义参数绑定 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <list>
                <!--日期类型转换-->
                <!--<bean class="cn.itcast.ssm.controller.converter.CustomDateConverter"/>-->
            </list>
        </property>
    </bean>

    <!-- 配置校验器 -->
    <!-- <bean id="validator" -->
    <!-- class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"> -->
    <!-- 校验器 -->
    <!-- <property name="providerClass" value="org.hibernate.validator.HibernateValidator"
        /> -->
    <!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
    <!-- <property name="validationMessageSource" ref="messageSource" /> -->
    <!-- </bean> -->


    <!-- 校验错误信息配置文件 -->
    <!-- <bean id="messageSource" -->
    <!-- class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> -->
    <!-- 资源文件名 -->
    <!-- <property name="basenames"> -->
    <!-- <list> -->
    <!-- <value>classpath:CustomValidationMessages</value> -->
    <!-- </list> -->
    <!-- </property> -->
    <!-- 资源文件编码格式 -->
    <!-- <property name="fileEncodings" value="utf-8" /> -->
    <!-- 对资源文件内容缓存时间，单位秒 -->
    <!-- <property name="cacheSeconds" value="120" /> -->
    <!-- </bean> -->


    <!-- 文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>

    <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop
                        key="org.springframework.web.multipart.MaxUploadSizeExceededException">/view/admin/info/file_errors.jsp
                </prop>
            </props>
        </property>
    </bean>


</beans>